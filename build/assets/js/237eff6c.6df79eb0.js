"use strict";(self.webpackChunkbuilders_eth=self.webpackChunkbuilders_eth||[]).push([[18],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=c(n),f=i,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||o;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=d;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,l[1]=a;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2179:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return p}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),l=["components"],a={sidebar_position:9},s="HelloWorld.sol on Your Machine",c={unversionedId:"solidity-101/language-building-blocks/Solidity-File-Overview/HelloWorld-On-Your-Machine",id:"solidity-101/language-building-blocks/Solidity-File-Overview/HelloWorld-On-Your-Machine",title:"HelloWorld.sol on Your Machine",description:"Let's create our HelloWorld.sol to a local development environment on our machine.",source:"@site/docs/solidity-101/2-language-building-blocks/1-Solidity-File-Overview/9-HelloWorld-On-Your-Machine.mdx",sourceDirName:"solidity-101/2-language-building-blocks/1-Solidity-File-Overview",slug:"/solidity-101/language-building-blocks/Solidity-File-Overview/HelloWorld-On-Your-Machine",permalink:"/docs/solidity-101/language-building-blocks/Solidity-File-Overview/HelloWorld-On-Your-Machine",draft:!1,editUrl:"https://github.com/tesla809/BuildersETH/issues/docs/solidity-101/2-language-building-blocks/1-Solidity-File-Overview/9-HelloWorld-On-Your-Machine.mdx",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Licences",permalink:"/docs/solidity-101/language-building-blocks/Solidity-File-Overview/Licences"},next:{title:"Second Smart Contract: Storage Box",permalink:"/docs/solidity-101/language-building-blocks/Solidity-File-Overview/Second-Smart-Contract"}},u={},p=[{value:"Setting Up Development Enivronment",id:"setting-up-development-enivronment",level:2},{value:"Directory Description",id:"directory-description",level:3},{value:"Contracts",id:"contracts",level:4},{value:"Migrations",id:"migrations",level:4},{value:"Test",id:"test",level:4},{value:"truffle.config.js",id:"truffleconfigjs",level:4}],d={toc:p};function f(e){var t=e.components,n=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"helloworldsol-on-your-machine"},"HelloWorld.sol on Your Machine"),(0,o.kt)("p",null,"Let's create our ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld.sol")," to a local development environment on our machine."),(0,o.kt)("h2",{id:"setting-up-development-enivronment"},"Setting Up Development Enivronment"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Split into new file - Your first smart contract")),(0,o.kt)("p",null,"First, let's create a new directory. Navigate to where you want to place your code and create a new directory, aka folder."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"mkdir web3CryptoDev"),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"1-storageContract")),(0,o.kt)("p",null,"Now lets create the project scaffold:\n",(0,o.kt)("inlineCode",{parentName:"p"},"truffle init")),(0,o.kt)("p",null,"Inside our newly created project we find a few files:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 contracts\n\u2502\xa0\xa0 \u2514\u2500\u2500 Migrations.sol\n\u251c\u2500\u2500 migrations\n\u2502\xa0\xa0 \u2514\u2500\u2500 1_initial_migration.js\n\u251c\u2500\u2500 test\n\u2514\u2500\u2500 truffle-config.js\n")),(0,o.kt)("h3",{id:"directory-description"},"Directory Description"),(0,o.kt)("h4",{id:"contracts"},"Contracts"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"contracts")," directory is where your smart contracts are stored."),(0,o.kt)("p",null,"The default file is the ",(0,o.kt)("inlineCode",{parentName:"p"},"Migratons.sol"),", which keeps a history of previously run migrations that is recorded on-chain."),(0,o.kt)("h4",{id:"migrations"},"Migrations"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"migrations")," directory files that helps you help you deploy contracts to the Ethereum network. Migration files are simply a set of managed deployment scripts. All the migrations located in this will run in the order listed, from 1 to N."),(0,o.kt)("p",null,"The first script is ",(0,o.kt)("inlineCode",{parentName:"p"},"1_initial_migration.js")," and is for the ",(0,o.kt)("inlineCode",{parentName:"p"},"Migration.sol"),". In truffle, contract usually has its own migration script."),(0,o.kt)("p",null,"So, ",(0,o.kt)("inlineCode",{parentName:"p"},"Apple.sol")," would have ",(0,o.kt)("inlineCode",{parentName:"p"},"n-apple.sol")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," being the order you'd like to deploy it."),(0,o.kt)("p",null,"We will learn more about migrations later."),(0,o.kt)("h4",{id:"test"},"Test"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"test")," folder holds our tests. Testing is EXTREMELY important in smart contract development, because they are technically immutable and can hold large sums of value. Along with testing ",(0,o.kt)("a",{parentName:"p",href:"https://consensys.net/diligence/scribble/"},(0,o.kt)("strong",{parentName:"a"},"fuzzing"))," is also a best practice."),(0,o.kt)("p",null,"We will cover these topics later."),(0,o.kt)("h4",{id:"truffleconfigjs"},"truffle.config.js"),(0,o.kt)("p",null,"This holds the configuration for our project. Here we can customize the networks, network providers, and other things."),(0,o.kt)("p",null,"You can learn more about ",(0,o.kt)("a",{parentName:"p",href:"https://trufflesuite.com/docs/truffle/reference/configuration/"},"truffle.config.js here"),". We will be covering this later."))}f.isMDXComponent=!0}}]);