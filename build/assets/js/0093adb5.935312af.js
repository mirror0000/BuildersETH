"use strict";(self.webpackChunkbuilders_eth=self.webpackChunkbuilders_eth||[]).push([[3452],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2360:function(e,t,n){n.d(t,{Z:function(){return i}});var a=n(7294),r=n(6010),o="tabItem_OmH5";function i(e){var t=e.children,n=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return m}});var a=n(7462),r=n(7294),o=n(2389),i=n(7392),l=n(7094),s=n(2466),c=n(6010),p="tabList_uSqn",u="tabItem_LplD";function d(e){var t,n,o,d=e.lazy,m=e.block,h=e.defaultValue,g=e.values,f=e.groupId,k=e.className,v=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=g?g:v.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),b=(0,i.l)(y,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var w=null===h?h:null!=(t=null!=h?h:null==(n=v.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(o=v[0])?void 0:o.props.value;if(null!==w&&!y.some((function(e){return e.value===w})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,l.U)(),T=N.tabGroupChoices,C=N.setTabGroupChoices,x=(0,r.useState)(w),S=x[0],O=x[1],P=[],E=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var I=T[f];null!=I&&I!==S&&y.some((function(e){return e.value===I}))&&O(I)}var j=function(e){var t=e.currentTarget,n=P.indexOf(t),a=y[n].value;a!==S&&(E(t),O(a),null!=f&&C(f,a))},D=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=P.indexOf(e.currentTarget)+1;n=P[a]||P[0];break;case"ArrowLeft":var r=P.indexOf(e.currentTarget)-1;n=P[r]||P[P.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,c.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":m},k)},y.map((function(e){var t=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:S===t?0:-1,"aria-selected":S===t,key:t,ref:function(e){return P.push(e)},onKeyDown:D,onFocus:j,onClick:j},o,{className:(0,c.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":S===t})}),null!=n?n:t)}))),d?(0,r.cloneElement)(v.filter((function(e){return e.props.value===S}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==S})}))))}function m(e){var t=(0,o.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},7291:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return m}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=n(9877),l=n(2360),s=["components"],c={sidebar_position:2},p="\ud83d\udcdd Notes Staging Area",u={unversionedId:"notes",id:"notes",title:"\ud83d\udcdd Notes Staging Area",description:"Add notes here to then split into separate lessons.",source:"@site/docs/notes.mdx",sourceDirName:".",slug:"/notes",permalink:"/docs/notes",draft:!1,editUrl:"https://github.com/tesla809/BuildersETH/issues/docs/notes.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udc4b Welcome",permalink:"/docs/intro"},next:{title:"Course Introduction",permalink:"/docs/solidity-101/course-introduction/introduction-course"}},d={},m=[{value:"Hello, World!",id:"hello-world",level:2},{value:"File extension",id:"file-extension",level:2},{value:"Comments",id:"comments",level:2},{value:"Pragma - Define The Solidity Compiler Type",id:"pragma---define-the-solidity-compiler-type",level:2},{value:"License",id:"license",level:2},{value:"Contract Keyword",id:"contract-keyword",level:2},{value:"Variables",id:"variables",level:2},{value:"What is a Compiler",id:"what-is-a-compiler",level:3},{value:"Semver targeting",id:"semver-targeting",level:2},{value:"Defining Pragma",id:"defining-pragma",level:2},{value:"Pragma Best Practice",id:"pragma-best-practice",level:2}],h={toc:m};function g(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"-notes-staging-area"},"\ud83d\udcdd Notes Staging Area"),(0,o.kt)("p",null,"Add notes here to then split into separate lessons."),(0,o.kt)("h2",{id:"hello-world"},"Hello, World!"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Hello World!")," is usually the first program we write when learning a new programming language."),(0,o.kt)("p",null,"This simple contract contains a few concepts:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"pragma")),(0,o.kt)("li",{parentName:"ul"},"comments"),(0,o.kt)("li",{parentName:"ul"},"licenses"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"contract"))),(0,o.kt)("p",null,"We will go into each of these in-depth later."),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"sol",label:"HelloWorld.sol",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\n// compiler version must be greater than or equal to 0.8.13 and less than 0.9.0\npragma solidity ^0.8.13;\n\ncontract HelloWorld {\n    string public greetings = "Hello World!";\n}\n')))),(0,o.kt)("h2",{id:"file-extension"},"File extension"),(0,o.kt)("p",null,"This program is called: ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld.sol"),". Solidity files, called contracts, end with the ",(0,o.kt)("inlineCode",{parentName:"p"},".sol")," extension."),(0,o.kt)("h1",{id:"nameing-conventions"},"Nameing Conventions"),(0,o.kt)("p",null,"Solidity contracts follow the PascalCase convention: the first letter capitalized, followed by each word."),(0,o.kt)("p",null,"An exception is if the file is based on an acronym."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"SampleFile.sol"),(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"ERC20.sol"),(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"MyToken.sol")),(0,o.kt)("h2",{id:"comments"},"Comments"),(0,o.kt)("p",null,"Comments function similar to JavaScript."),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"sol",label:"Comments.sol",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"// this is a single line comment\n\n/* this is a\n\nmulti line comment\n*/\n")))),(0,o.kt)("h2",{id:"pragma---define-the-solidity-compiler-type"},"Pragma - Define The Solidity Compiler Type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"pragma solidity 0.8.13;\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"pragma")," specifies the compiler verson of Solidity."),(0,o.kt)("h2",{id:"license"},"License"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\n")),(0,o.kt)("p",null,"Every contract needs to specify the license which supports it."),(0,o.kt)("p",null,"Licensing is essential because it stipulates how you can use a piece of code. Much of the open source software movement is based on legal innovations on very permissive licenses like ",(0,o.kt)("a",{parentName:"p",href:"https://choosealicense.com/licenses/mit/"},"MIT License")," and ",(0,o.kt)("a",{parentName:"p",href:"https://choosealicense.com/licenses/gpl-3.0/"},"GPL-3.0"),"."),(0,o.kt)("h2",{id:"contract-keyword"},"Contract Keyword"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"contract HelloWorld { ... }\n")),(0,o.kt)("p",null,"Solidity is an object-oriented language. This means that it uses something like classes to structure information. For example, you can think of the keyword ",(0,o.kt)("inlineCode",{parentName:"p"},"Contract")," as similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"class")," keyword in other programming languages like C, Java, or JavaScript."),(0,o.kt)("h2",{id:"variables"},"Variables"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},'string public greetings = "Hello World!";\n')),(0,o.kt)("p",null,"Variables in Solidity are different than JavaScript. One of the differences is the need to define their data type and visibility up front."),(0,o.kt)("p",null,"Data type represents the type of data. This reduces errors related to adding incorrect data types to variables. Visibility focuses on who can access the data."),(0,o.kt)("hr",null),(0,o.kt)("h1",{id:"pragma-choosing-the-right-compiler"},"Pragma: Choosing the Right Compiler"),(0,o.kt)("p",null,"Let's examine our ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld.sol")," contract to focus on ",(0,o.kt)("inlineCode",{parentName:"p"},"pragma"),"."),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"sol",label:"HelloWorld.sol",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\n// compiler version must be greater than or equal to 0.8.13 and less than 0.9.0\npragma solidity ^0.8.13;\n\ncontract HelloWorld {\n    string public greetings = "Hello World!";\n}\n')))),(0,o.kt)("p",null,"As mentioned before, pragma lets the Solidity Compiler know which version of Solidity you are using. For this course, we will focus on Solidity ",(0,o.kt)("inlineCode",{parentName:"p"},"0.8.13"),"."),(0,o.kt)("p",null,"Like all programming languages, Solidity is an evolving language. Over time, updates, bug fixes, and improvements make the languages easier and safer to use."),(0,o.kt)("p",null,"It is essential to specify the version of the language used. The language is compiled into EVM bytecode, then run on the Ethereum Virtual Machine. Knowing which version to use lets the compiler know how to translate the code."),(0,o.kt)("h3",{id:"what-is-a-compiler"},"What is a Compiler"),(0,o.kt)("p",null,"A compiler is software that translates human-readable code into a lower-level form, usually machine-readable code. Compilers are helpful because they allow for high-level languages with valuable additions to make development easier."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"pragma solidity >=0.4.16 <0.9.0;\n")),(0,o.kt)("h2",{id:"semver-targeting"},"Semver targeting"),(0,o.kt)("p",null,"Such a broad scope for the compiler can result in errors and uncaught bugs since such a wide range eliminates the ability to use the correct compiler predictable across development environments. For example, one developer may have ",(0,o.kt)("inlineCode",{parentName:"p"},"0.8.10"),", while another may have ",(0,o.kt)("inlineCode",{parentName:"p"},"0.5.5"),"."),(0,o.kt)("p",null,"We can specify the choose the version of the language using ",(0,o.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/introduction-semantic-versioning/"},"semantic versioning (semver)"),"."),(0,o.kt)("p",null,"In ",(0,o.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/introduction-semantic-versioning/#:~:text=Semantic%20Versioning%20is%20a%203,and%20minor%20versions%20to%20zero."},"semantic versioning")," (semver):"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"major versions: ",(0,o.kt)("strong",{parentName:"li"},"x")," -> ",(0,o.kt)("strong",{parentName:"li"},"x"),".yy.zz"),(0,o.kt)("li",{parentName:"ul"},"minor versions: ",(0,o.kt)("strong",{parentName:"li"},"y")," -> x.",(0,o.kt)("strong",{parentName:"li"},"yy"),".zz"),(0,o.kt)("li",{parentName:"ul"},"patches: ",(0,o.kt)("strong",{parentName:"li"},"z")," -> x.yy.",(0,o.kt)("strong",{parentName:"li"},"zz"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Major:")," break the API and are not backward compatible.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("strong",{parentName:"p"},"Minor:")," update the API and are backward compatible.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("strong",{parentName:"p"},"Patches:")," bug fixes."),(0,o.kt)("h2",{id:"defining-pragma"},"Defining Pragma"),(0,o.kt)("p",null,"Using Semver and ",(0,o.kt)("inlineCode",{parentName:"p"},"pragma"),", we can choose the correct compiler version. Solidity follows the semver syntax used by ",(0,o.kt)("a",{parentName:"p",href:"https://docs.npmjs.com/cli/v6/using-npm/semver"},"npm"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"pragma solidity >=0.8.0 <0.9.0;\n// Anything between 0.8.0 to 0.9.0\n// where 0.9.0 is not included.\n\npragma solidity ^0.8.5;\n// same as above\n// Anything above 0.8.0 to 0.9.0\n// where 0.9.0 is not included.\n\npragma solidity ~0.8.5;\n// accept patches from 0.8.5 and up\n// patches are 0.00.xx\n\npragma solidity 0.8.8;\n// ONLY version 0.8.8\n")),(0,o.kt)("h2",{id:"pragma-best-practice"},"Pragma Best Practice"),(0,o.kt)("p",null,"When in doubt, choose one relatively recent version of Solidity only in the current major version. This is for two reasons."),(0,o.kt)("p",null,"First, known bugs and errors from previous versions have been addressed, leading to safer code."),(0,o.kt)("p",null,"Second, you will have fewer errors. The compiler is pretty strict about errors. Due to language updates, an older version of Solidity will throw more errors than the recent version."),(0,o.kt)("hr",null),(0,o.kt)("h1",{id:"licences"},"Licences"),(0,o.kt)("p",null,"Let's look at ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld.sol")," again, and look into the licenses."),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"sol",label:"HelloWorld.sol",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\n// compiler version must be greater than or equal to 0.8.13 and less than 0.9.0\npragma solidity ^0.8.13;\n\ncontract HelloWorld {\n    string public greetings = "Hello World!";\n}\n')))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://choosealicense.com/"},"Licenses")," can help direct the project toward the creator's aims, like the freedom to remix, but only if the base code is open-sourced. Or a more accessible approach like \"do what you want\". Used appropriately, they can limit the developer's liability should something go wrong with the code."),(0,o.kt)("p",null,"Most licenses in the crypto are entirely open source. This allows for the reduction of headaches when dealing with code. If it is easy to deal with your code, more money may flow into it."),(0,o.kt)("p",null,"Two of popular licences are the ",(0,o.kt)("a",{parentName:"p",href:"https://choosealicense.com/licenses/mit/"},"MIT License")," and ",(0,o.kt)("a",{parentName:"p",href:"https://choosealicense.com/licenses/gpl-3.0/"},"GPL-3.0"),"."),(0,o.kt)("p",null,"Another is ",(0,o.kt)("a",{parentName:"p",href:"https://choosealicense.com/licenses/unlicense/"},"Unlicense"),', which is basically like "so whatever you want with this".'),(0,o.kt)("p",null,"What if someone copies my code? Network effects, liquidity, and branding are better defensible moats to your project. This can be a topic for a future educational blog post."),(0,o.kt)("p",null,"Note that none of this in this tutorial is legal advice and is written purely for educational purposes."))}g.isMDXComponent=!0}}]);