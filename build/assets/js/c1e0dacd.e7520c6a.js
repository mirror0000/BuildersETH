"use strict";(self.webpackChunkbuilders_eth=self.webpackChunkbuilders_eth||[]).push([[6312],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return y}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),y=r,m=d["".concat(s,".").concat(y)]||d[y]||c[y]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6137:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return y},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={sidebar_position:1},s="Introduction: Data Types",u={unversionedId:"solidity-101/language-building-blocks/Data-Types/introduction-variable-and-data-types",id:"solidity-101/language-building-blocks/Data-Types/introduction-variable-and-data-types",title:"Introduction: Data Types",description:"Primitive Data Types Overview",source:"@site/docs/solidity-101/2-language-building-blocks/2-Data-Types/7-introduction-variable-and-data-types.mdx",sourceDirName:"solidity-101/2-language-building-blocks/2-Data-Types",slug:"/solidity-101/language-building-blocks/Data-Types/introduction-variable-and-data-types",permalink:"/docs/solidity-101/language-building-blocks/Data-Types/introduction-variable-and-data-types",draft:!1,editUrl:"https://github.com/tesla809/BuildersETH/issues/docs/solidity-101/2-language-building-blocks/2-Data-Types/7-introduction-variable-and-data-types.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Second Smart Contract: Storage Box",permalink:"/docs/solidity-101/language-building-blocks/Solidity-File-Overview/Second-Smart-Contract"},next:{title:"Booleans",permalink:"/docs/solidity-101/language-building-blocks/Data-Types/booleans"}},p={},c=[{value:"Primitive Data Types Overview",id:"primitive-data-types-overview",level:2},{value:"Value Types Defined",id:"value-types-defined",level:2},{value:"Structing Data in Context",id:"structing-data-in-context",level:2}],d={toc:c};function y(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction-data-types"},"Introduction: Data Types"),(0,i.kt)("h2",{id:"primitive-data-types-overview"},"Primitive Data Types Overview"),(0,i.kt)("p",null,"In a high-level programming language, a primitive data type is the simplest building block for data. They are data types that cannot be reduced into a simpler form. Primary data types are the building blocks for other data types."),(0,i.kt)("p",null,"Usually, these at least include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"certain types of number representations"),(0,i.kt)("li",{parentName:"ul"},"strings for character representation"),(0,i.kt)("li",{parentName:"ul"},"Booleans for true or false representation")),(0,i.kt)("h2",{id:"value-types-defined"},"Value Types Defined"),(0,i.kt)("p",null,"This section will cover ",(0,i.kt)("strong",{parentName:"p"},"value types"),"."),(0,i.kt)("p",null,"A value type:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"is the actual value."),(0,i.kt)("li",{parentName:"ul"},"stores its data directly on the memory it owns."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passes by value")," aka, the variable's values are ",(0,i.kt)("strong",{parentName:"li"},"copied")," when they are used as function arguments or in assignments. These copies don't affect the original data.")),(0,i.kt)("p",null,"These are different from ",(0,i.kt)("strong",{parentName:"p"},"reference types"),"."),(0,i.kt)("p",null,"Reference types:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Reference_(computer_science)"},"references")," data at another location, aka it ",(0,i.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Pointer_(computer_programming)"},"points")," to another spot.")),(0,i.kt)("p",null,"We will cover reference types and memory in the following lessons."),(0,i.kt)("h2",{id:"structing-data-in-context"},"Structing Data in Context"),(0,i.kt)("p",null,"Why are these important? To write a program, you must define the type of data you will store and manipulate. For example, will you hold numbers, words, a collections of these, or some custom data type etc.?"),(0,i.kt)("p",null,"A significant part of understanding how to design and code programs centers around:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"understanding which types of data you'd want to manipulate."),(0,i.kt)("li",{parentName:"ul"},"and how to manipulate that data.")),(0,i.kt)("p",null,"Once our data is structured correctly, algorithms are used to manipulate the data. ",(0,i.kt)("strong",{parentName:"p"},"Algorithms")," are a series of instructions to solve a specific type of problem efficiently. It's worth noting that certain types of problems are best solved with particular data types and algorithms. The study of this is covered in a course on data structure and algorithms."),(0,i.kt)("p",null,"Furthermore, certain recurring business logic problems are best solved with repeatable patterns. These best practices are called ",(0,i.kt)("strong",{parentName:"p"},"design patterns"),", and their application to web3 development will be covered in the future."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Add stuff.")))}y.isMDXComponent=!0}}]);