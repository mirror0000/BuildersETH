"use strict";(self.webpackChunkbuilders_eth=self.webpackChunkbuilders_eth||[]).push([[9201],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5306:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),i=["components"],o={sidebar_position:3},s="Strings",p={unversionedId:"solidity-101/language-building-blocks/Data-Types/strings",id:"solidity-101/language-building-blocks/Data-Types/strings",title:"Strings",description:"Strings are a sequence of characters, either as a literal constant or as some kind of variable.",source:"@site/docs/solidity-101/2-language-building-blocks/2-Data-Types/9-strings.mdx",sourceDirName:"solidity-101/2-language-building-blocks/2-Data-Types",slug:"/solidity-101/language-building-blocks/Data-Types/strings",permalink:"/docs/solidity-101/language-building-blocks/Data-Types/strings",draft:!1,editUrl:"https://github.com/tesla809/BuildersETH/issues/docs/solidity-101/2-language-building-blocks/2-Data-Types/9-strings.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Booleans",permalink:"/docs/solidity-101/language-building-blocks/Data-Types/booleans"},next:{title:"Integers",permalink:"/docs/solidity-101/language-building-blocks/Data-Types/integers"}},c={},u=[{value:"String escape characters",id:"string-escape-characters",level:3}],d=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",t)}},m=d("Tabs"),g=d("TabItem"),b={toc:u};function k(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"strings"},"Strings"),(0,l.kt)("p",null,"Strings are a sequence of characters, either as a ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Literal_(computer_programming)"},"literal constant")," or as some kind of variable."),(0,l.kt)("p",null,"In both Solidity and JavaScript, strings are immtuable. The word ",(0,l.kt)("inlineCode",{parentName:"p"},'"Hello"')," is fixed. If you change it to ",(0,l.kt)("inlineCode",{parentName:"p"},'"Hello World"')," is a totally different word."),(0,l.kt)(m,{mdxType:"Tabs"},(0,l.kt)(g,{value:"sol",label:"Solidity",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ncontract Strings {\n    bool public str1 = "Hello, World";\n}\n'))),(0,l.kt)(g,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'class Strings {\n  let str = "Hello, World";\n}\n')))),(0,l.kt)("h3",{id:"string-escape-characters"},"String escape characters"),(0,l.kt)("p",null,"There are escape characters as well. Note the capital letter ",(0,l.kt)("inlineCode",{parentName:"p"},"N")," is a stand in, and can represent any character as defined in the description."),(0,l.kt)("p",null,"With the exception of ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates#hexadecimal_numbers"},"hexadecimal represenation"),", these are all the same in JavaScript."),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.techtarget.com/whatis/definition/hexadecimal"},"Hexcadecimal values")," are base-16 number systems running from 0-9 and A-F. You probably have seen them while using CSS."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\\n"),(0,l.kt)("td",{parentName:"tr",align:null},"Starts a new line.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\\"),(0,l.kt)("td",{parentName:"tr",align:null},"Backslash")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\\n"),(0,l.kt)("td",{parentName:"tr",align:null},"Starts a new line.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\\'"),(0,l.kt)("td",{parentName:"tr",align:null},"Single Quote")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},'\\"'),(0,l.kt)("td",{parentName:"tr",align:null},"Double Quote")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\\b"),(0,l.kt)("td",{parentName:"tr",align:null},"Backspace")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\\f"),(0,l.kt)("td",{parentName:"tr",align:null},"Form Feed")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\\r"),(0,l.kt)("td",{parentName:"tr",align:null},"carriage return")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\\t"),(0,l.kt)("td",{parentName:"tr",align:null},"tab")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\\v"),(0,l.kt)("td",{parentName:"tr",align:null},"vertical tab")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\\xNN"),(0,l.kt)("td",{parentName:"tr",align:null},"Represents hexadecimal values and inserts appropriate bytes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"\\uNNNN"),(0,l.kt)("td",{parentName:"tr",align:null},"Represents Unicode value and inserts UTF-8 sequence.")))))}k.isMDXComponent=!0}}]);