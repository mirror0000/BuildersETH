"use strict";(self.webpackChunkbuilders_eth=self.webpackChunkbuilders_eth||[]).push([[4984],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2360:function(e,t,n){n.d(t,{Z:function(){return o}});var r=n(7294),a=n(6010),i="tabItem_OmH5";function o(e){var t=e.children,n=e.hidden,o=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,o),hidden:n},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return m}});var r=n(7462),a=n(7294),i=n(2389),o=n(7392),l=n(7094),s=n(2466),u=n(6010),c="tabList_uSqn",p="tabItem_LplD";function d(e){var t,n,i,d=e.lazy,m=e.block,g=e.defaultValue,v=e.values,h=e.groupId,f=e.className,b=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=v?v:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),k=(0,o.l)(y,(function(e,t){return e.value===t.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var w=null===g?g:null!=(t=null!=g?g:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(i=b[0])?void 0:i.props.value;if(null!==w&&!y.some((function(e){return e.value===w})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,l.U)(),O=N.tabGroupChoices,P=N.setTabGroupChoices,x=(0,a.useState)(w),S=x[0],T=x[1],C=[],E=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var j=O[h];null!=j&&j!==S&&y.some((function(e){return e.value===j}))&&T(j)}var D=function(e){var t=e.currentTarget,n=C.indexOf(t),r=y[n].value;r!==S&&(E(t),T(r),null!=h&&P(h,r))},I=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=C.indexOf(e.currentTarget)+1;n=C[r]||C[0];break;case"ArrowLeft":var a=C.indexOf(e.currentTarget)-1;n=C[a]||C[C.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,u.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":m},f)},y.map((function(e){var t=e.value,n=e.label,i=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:S===t?0:-1,"aria-selected":S===t,key:t,ref:function(e){return C.push(e)},onKeyDown:I,onFocus:D,onClick:D},i,{className:(0,u.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":S===t})}),null!=n?n:t)}))),d?(0,a.cloneElement)(b.filter((function(e){return e.props.value===S}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==S})}))))}function m(e){var t=(0,i.Z)();return a.createElement(d,(0,r.Z)({key:String(t)},e))}},4029:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return v},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=n(9877),l=n(2360),s=["components"],u={sidebar_position:7},c="Pragma: Choosing the Right Compiler",p={unversionedId:"solidity-101/language-building-blocks/Solidity-File-Overview/Pragma",id:"solidity-101/language-building-blocks/Solidity-File-Overview/Pragma",title:"Pragma: Choosing the Right Compiler",description:"Let's examine our HelloWorld.sol contract to focus on pragma.",source:"@site/docs/solidity-101/2-language-building-blocks/1-Solidity-File-Overview/7-Pragma.mdx",sourceDirName:"solidity-101/2-language-building-blocks/1-Solidity-File-Overview",slug:"/solidity-101/language-building-blocks/Solidity-File-Overview/Pragma",permalink:"/docs/solidity-101/language-building-blocks/Solidity-File-Overview/Pragma",draft:!1,editUrl:"https://github.com/tesla809/BuildersETH/issues/docs/solidity-101/2-language-building-blocks/1-Solidity-File-Overview/7-Pragma.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Hello, World!",permalink:"/docs/solidity-101/language-building-blocks/Solidity-File-Overview/hello-world"},next:{title:"Licences",permalink:"/docs/solidity-101/language-building-blocks/Solidity-File-Overview/Licences"}},d={},m=[{value:"What is a Compiler",id:"what-is-a-compiler",level:3},{value:"Semver targeting",id:"semver-targeting",level:2},{value:"Defining Pragma",id:"defining-pragma",level:2},{value:"Pragma Best Practice",id:"pragma-best-practice",level:2}],g={toc:m};function v(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pragma-choosing-the-right-compiler"},"Pragma: Choosing the Right Compiler"),(0,i.kt)("p",null,"Let's examine our ",(0,i.kt)("inlineCode",{parentName:"p"},"HelloWorld.sol")," contract to focus on ",(0,i.kt)("inlineCode",{parentName:"p"},"pragma"),"."),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"sol",label:"HelloWorld.sol",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\n// compiler version must be greater than or equal to 0.8.13 and less than 0.9.0\npragma solidity ^0.8.13;\n\ncontract HelloWorld {\n    string public greetings = "Hello World!";\n}\n')))),(0,i.kt)("p",null,"As mentioned before, pragma lets the Solidity Compiler know which version of Solidity you are using. For this course, we will focus on Solidity ",(0,i.kt)("inlineCode",{parentName:"p"},"0.8.13"),"."),(0,i.kt)("p",null,"Like all programming languages, Solidity is an evolving language. Over time, updates, bug fixes, and improvements make the languages easier and safer to use."),(0,i.kt)("p",null,"It is essential to specify the version of the language used. The language is compiled into EVM bytecode, then run on the Ethereum Virtual Machine. Knowing which version to use lets the compiler know how to translate the code."),(0,i.kt)("h3",{id:"what-is-a-compiler"},"What is a Compiler"),(0,i.kt)("p",null,"A compiler is software that translates human-readable code into a lower-level form, usually machine-readable code. Compilers are helpful because they allow for high-level languages with valuable additions to make development easier."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"pragma solidity >=0.4.16 <0.9.0;\n")),(0,i.kt)("h2",{id:"semver-targeting"},"Semver targeting"),(0,i.kt)("p",null,"Such a broad scope for the compiler can result in errors and uncaught bugs since such a wide range eliminates the ability to use the correct compiler predictable across development environments. For example, one developer may have ",(0,i.kt)("inlineCode",{parentName:"p"},"0.8.10"),", while another may have ",(0,i.kt)("inlineCode",{parentName:"p"},"0.5.5"),"."),(0,i.kt)("p",null,"We can specify the choose the version of the language using ",(0,i.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/introduction-semantic-versioning/"},"semantic versioning (semver)"),"."),(0,i.kt)("p",null,"In ",(0,i.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/introduction-semantic-versioning/#:~:text=Semantic%20Versioning%20is%20a%203,and%20minor%20versions%20to%20zero."},"semantic versioning")," (semver):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"major versions: ",(0,i.kt)("strong",{parentName:"li"},"x")," -> ",(0,i.kt)("strong",{parentName:"li"},"x"),".yy.zz"),(0,i.kt)("li",{parentName:"ul"},"minor versions: ",(0,i.kt)("strong",{parentName:"li"},"y")," -> x.",(0,i.kt)("strong",{parentName:"li"},"yy"),".zz"),(0,i.kt)("li",{parentName:"ul"},"patches: ",(0,i.kt)("strong",{parentName:"li"},"z")," -> x.yy.",(0,i.kt)("strong",{parentName:"li"},"zz"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Major:")," break the API and are not backward compatible.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("strong",{parentName:"p"},"Minor:")," update the API and are backward compatible.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("strong",{parentName:"p"},"Patches:")," bug fixes."),(0,i.kt)("h2",{id:"defining-pragma"},"Defining Pragma"),(0,i.kt)("p",null,"Using Semver and ",(0,i.kt)("inlineCode",{parentName:"p"},"pragma"),", we can choose the correct compiler version. Solidity follows the semver syntax used by ",(0,i.kt)("a",{parentName:"p",href:"https://docs.npmjs.com/cli/v6/using-npm/semver"},"npm"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"pragma solidity >=0.8.0 <0.9.0;\n// Anything between 0.8.0 to 0.9.0\n// where 0.9.0 is not included.\n\npragma solidity ^0.8.5;\n// same as above\n// Anything above 0.8.0 to 0.9.0\n// where 0.9.0 is not included.\n\npragma solidity ~0.8.5;\n// accept patches from 0.8.5 and up\n// patches are 0.00.xx\n\npragma solidity 0.8.8;\n// ONLY version 0.8.8\n")),(0,i.kt)("h2",{id:"pragma-best-practice"},"Pragma Best Practice"),(0,i.kt)("p",null,"When in doubt, choose one relatively recent version of Solidity only in the current major version. This is for two reasons."),(0,i.kt)("p",null,"First, known bugs and errors from previous versions have been addressed, leading to safer code."),(0,i.kt)("p",null,"Second, you will have fewer errors. The compiler is pretty strict about errors. Due to language updates, an older version of Solidity will throw more errors than the recent version."))}v.isMDXComponent=!0}}]);