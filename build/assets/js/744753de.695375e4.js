"use strict";(self.webpackChunkbuilders_eth=self.webpackChunkbuilders_eth||[]).push([[749],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),y=u(n),d=a,b=y["".concat(l,".").concat(d)]||y[d]||p[d]||i;return n?r.createElement(b,o(o({ref:t},c),{},{components:n})):r.createElement(b,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},2551:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:13},l="Bytes",u={unversionedId:"solidity-101/language-building-blocks/Data-Types/bytes",id:"solidity-101/language-building-blocks/Data-Types/bytes",title:"Bytes",description:"In Solidity, the data type byte represent a sequence of bytes.",source:"@site/docs/solidity-101/2-language-building-blocks/2-Data-Types/14-bytes.mdx",sourceDirName:"solidity-101/2-language-building-blocks/2-Data-Types",slug:"/solidity-101/language-building-blocks/Data-Types/bytes",permalink:"/docs/solidity-101/language-building-blocks/Data-Types/bytes",draft:!1,editUrl:"https://github.com/tesla809/BuildersETH/issues/docs/solidity-101/2-language-building-blocks/2-Data-Types/14-bytes.mdx",tags:[],version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13},sidebar:"tutorialSidebar",previous:{title:"Maximum and Minimum Numbers",permalink:"/docs/solidity-101/language-building-blocks/Data-Types/max-and-min-numbers"},next:{title:"Addresses",permalink:"/docs/solidity-101/language-building-blocks/Data-Types/addresses"}},c={},p=[],y=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)}},d=y("Tabs"),b=y("TabItem"),f={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"bytes"},"Bytes"),(0,i.kt)("p",null,"In Solidity, the data type byte represent a sequence of bytes.\nSolidity presents two type of bytes types :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"fixed-sized byte arrays"),(0,i.kt)("li",{parentName:"ul"},"dynamically-sized byte arrays.")),(0,i.kt)("p",null,"The term bytes in Solidity represents a dynamic array of bytes.\nIt\u2019s a shorthand for byte[]."),(0,i.kt)(d,{mdxType:"Tabs"},(0,i.kt)(b,{value:"sol",label:"Solidity",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ncontract MinMax {\n    // bytes\n    bytes1 a = 0xb5; //  [10110101]\n    bytes1 b = 0x56; //  [01010110]\n\n}\n"))),(0,i.kt)(b,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"class ArrayBuffer {\n    // create a buffer of 8 bytes\n    const buffer = new ArrayBuffer(8);\n    const view = new Int32Array(buffer);\n\n    // Learn more about ArrayBuffers here:\n    // https://javascript.info/arraybuffer-binary-arrays\n}\n")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Add more")))}m.isMDXComponent=!0}}]);