"use strict";(self.webpackChunkbuilders_eth=self.webpackChunkbuilders_eth||[]).push([[2610],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=s(t),f=a,g=p["".concat(l,".").concat(f)]||p[f]||d[f]||i;return t?r.createElement(g,u(u({ref:n},c),{},{components:t})):r.createElement(g,u({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,u=new Array(i);u[0]=p;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,u[1]=o;for(var s=2;s<i;s++)u[s]=t[s];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2360:function(e,n,t){t.d(n,{Z:function(){return u}});var r=t(7294),a=t(6010),i="tabItem_OmH5";function u(e){var n=e.children,t=e.hidden,u=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,u),hidden:t},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return f}});var r=t(7462),a=t(7294),i=t(2389),u=t(7392),o=t(7094),l=t(2466),s=t(6010),c="tabList_uSqn",d="tabItem_LplD";function p(e){var n,t,i,p=e.lazy,f=e.block,g=e.defaultValue,b=e.values,m=e.groupId,v=e.className,y=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=b?b:y.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),T=(0,u.l)(h,(function(e,n){return e.value===n.value}));if(T.length>0)throw new Error('Docusaurus error: Duplicate values "'+T.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===g?g:null!=(n=null!=g?g:null==(t=y.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(i=y[0])?void 0:i.props.value;if(null!==k&&!h.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var O=(0,o.U)(),w=O.tabGroupChoices,E=O.setTabGroupChoices,D=(0,a.useState)(k),x=D[0],j=D[1],I=[],N=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var P=w[m];null!=P&&P!==x&&h.some((function(e){return e.value===P}))&&j(P)}var Z=function(e){var n=e.currentTarget,t=I.indexOf(n),r=h[t].value;r!==x&&(N(n),j(r),null!=m&&E(m,r))},S=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r=I.indexOf(e.currentTarget)+1;t=I[r]||I[0];break;case"ArrowLeft":var a=I.indexOf(e.currentTarget)-1;t=I[a]||I[I.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,s.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":f},v)},h.map((function(e){var n=e.value,t=e.label,i=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:x===n?0:-1,"aria-selected":x===n,key:n,ref:function(e){return I.push(e)},onKeyDown:S,onFocus:Z,onClick:Z},i,{className:(0,s.Z)("tabs__item",d,null==i?void 0:i.className,{"tabs__item--active":x===n})}),null!=t?t:n)}))),p?(0,a.cloneElement)(y.filter((function(e){return e.props.value===x}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},y.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==x})}))))}function f(e){var n=(0,i.Z)();return a.createElement(p,(0,r.Z)({key:String(n)},e))}},3910:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return b},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return f}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),u=t(9877),o=t(2360),l=["components"],s={sidebar_position:5},c="Unsigned Integers",d={unversionedId:"solidity-101/language-building-blocks/Data-Types/unsigned-integers",id:"solidity-101/language-building-blocks/Data-Types/unsigned-integers",title:"Unsigned Integers",description:"uint stands for unsigned integer, meaning non negative integers",source:"@site/docs/solidity-101/2-language-building-blocks/2-Data-Types/11-unsigned-integers.mdx",sourceDirName:"solidity-101/2-language-building-blocks/2-Data-Types",slug:"/solidity-101/language-building-blocks/Data-Types/unsigned-integers",permalink:"/docs/solidity-101/language-building-blocks/Data-Types/unsigned-integers",draft:!1,editUrl:"https://github.com/tesla809/BuildersETH/issues/docs/solidity-101/2-language-building-blocks/2-Data-Types/11-unsigned-integers.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Integers",permalink:"/docs/solidity-101/language-building-blocks/Data-Types/integers"},next:{title:"Number Sizes",permalink:"/docs/solidity-101/language-building-blocks/Data-Types/integer-and-unsigned-integer-sizes"}},p={},f=[],g={toc:f};function b(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"unsigned-integers"},"Unsigned Integers"),(0,i.kt)("p",null,"uint stands for unsigned integer, meaning non negative integers"),(0,i.kt)(u.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"sol",label:"Solidity",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ncontract UnsignedIntegers {\n    // These are unsigned, meaning no negatives (-) value.\n    // So they are only positive (+)\n    uint8 public u8 = 1;\n    uint public u256 = 456;\n    uint public u = 123; // uint is short hand for uint256\n\n    uint public defaultUint; // 0\n}\n")))))}b.isMDXComponent=!0}}]);