"use strict";(self.webpackChunkbuilders_eth=self.webpackChunkbuilders_eth||[]).push([[7301],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),s=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,b=d["".concat(o,".").concat(m)]||d[m]||c[m]||i;return n?r.createElement(b,l(l({ref:t},p),{},{components:n})):r.createElement(b,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u.mdxType="string"==typeof e?e:a,l[1]=u;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2360:function(e,t,n){n.d(t,{Z:function(){return l}});var r=n(7294),a=n(6010),i="tabItem_OmH5";function l(e){var t=e.children,n=e.hidden,l=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,l),hidden:n},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return m}});var r=n(7462),a=n(7294),i=n(2389),l=n(7392),u=n(7094),o=n(2466),s=n(6010),p="tabList_uSqn",c="tabItem_LplD";function d(e){var t,n,i,d=e.lazy,m=e.block,b=e.defaultValue,g=e.values,f=e.groupId,k=e.className,y=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=g?g:y.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),N=(0,l.l)(v,(function(e,t){return e.value===t.value}));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var h=null===b?b:null!=(t=null!=b?b:null==(n=y.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(i=y[0])?void 0:i.props.value;if(null!==h&&!v.some((function(e){return e.value===h})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+h+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var T=(0,u.U)(),w=T.tabGroupChoices,O=T.setTabGroupChoices,E=(0,a.useState)(h),D=E[0],x=E[1],j=[],P=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var S=w[f];null!=S&&S!==D&&v.some((function(e){return e.value===S}))&&x(S)}var z=function(e){var t=e.currentTarget,n=j.indexOf(t),r=v[n].value;r!==D&&(P(t),x(r),null!=f&&O(f,r))},Z=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=j.indexOf(e.currentTarget)+1;n=j[r]||j[0];break;case"ArrowLeft":var a=j.indexOf(e.currentTarget)-1;n=j[a]||j[j.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,s.Z)("tabs-container",p)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":m},k)},v.map((function(e){var t=e.value,n=e.label,i=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:D===t?0:-1,"aria-selected":D===t,key:t,ref:function(e){return j.push(e)},onKeyDown:Z,onFocus:z,onClick:z},i,{className:(0,s.Z)("tabs__item",c,null==i?void 0:i.className,{"tabs__item--active":D===t})}),null!=n?n:t)}))),d?(0,a.cloneElement)(y.filter((function(e){return e.props.value===D}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},y.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==D})}))))}function m(e){var t=(0,i.Z)();return a.createElement(d,(0,r.Z)({key:String(t)},e))}},409:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return u},metadata:function(){return s},toc:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=(n(9877),n(2360),["components"]),u={sidebar_position:6},o="Number Sizes",s={unversionedId:"solidity-101/language-building-blocks/Data-Types/integer-and-unsigned-integer-sizes",id:"solidity-101/language-building-blocks/Data-Types/integer-and-unsigned-integer-sizes",title:"Number Sizes",description:"The table below shows the built-in integer types in Solidity.",source:"@site/docs/solidity-101/2-language-building-blocks/2-Data-Types/12-integer-and-unsigned-integer-sizes.mdx",sourceDirName:"solidity-101/2-language-building-blocks/2-Data-Types",slug:"/solidity-101/language-building-blocks/Data-Types/integer-and-unsigned-integer-sizes",permalink:"/docs/solidity-101/language-building-blocks/Data-Types/integer-and-unsigned-integer-sizes",draft:!1,editUrl:"https://github.com/tesla809/BuildersETH/issues/docs/solidity-101/2-language-building-blocks/2-Data-Types/12-integer-and-unsigned-integer-sizes.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Unsigned Integers",permalink:"/docs/solidity-101/language-building-blocks/Data-Types/unsigned-integers"},next:{title:"Maximum and Minimum Numbers",permalink:"/docs/solidity-101/language-building-blocks/Data-Types/max-and-min-numbers"}},p={},c=[],d={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"number-sizes"},"Number Sizes"),(0,i.kt)("p",null,"The table below shows the built-in integer types in Solidity."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Length"),(0,i.kt)("th",{parentName:"tr",align:null},"Signed"),(0,i.kt)("th",{parentName:"tr",align:null},"Unsigned"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"8-bit"),(0,i.kt)("td",{parentName:"tr",align:null},"int8"),(0,i.kt)("td",{parentName:"tr",align:null},"uint8")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"16-bit"),(0,i.kt)("td",{parentName:"tr",align:null},"int16"),(0,i.kt)("td",{parentName:"tr",align:null},"uint16")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"32-bit"),(0,i.kt)("td",{parentName:"tr",align:null},"int32"),(0,i.kt)("td",{parentName:"tr",align:null},"uint32")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"64-bit"),(0,i.kt)("td",{parentName:"tr",align:null},"int64"),(0,i.kt)("td",{parentName:"tr",align:null},"uint64")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"128-bit"),(0,i.kt)("td",{parentName:"tr",align:null},"int128"),(0,i.kt)("td",{parentName:"tr",align:null},"uint128")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"256-bit"),(0,i.kt)("td",{parentName:"tr",align:null},"int256"),(0,i.kt)("td",{parentName:"tr",align:null},"uint256")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"256-bit alias"),(0,i.kt)("td",{parentName:"tr",align:null},"int"),(0,i.kt)("td",{parentName:"tr",align:null},"uint")))),(0,i.kt)("p",null,"Like uint, different ranges are available from int8 to int256"),(0,i.kt)("p",null,"int256 ranges from -2 ",(0,i.kt)("strong",{parentName:"p"}," 255 to 2 ")," 255 - 1\nint128 ranges from -2 ",(0,i.kt)("strong",{parentName:"p"}," 127 to 2 ")," 127 - 1"),(0,i.kt)("p",null,"different sizes are available",(0,i.kt)("br",{parentName:"p"}),"\n","uint8 ranges from 0 to 2 ",(0,i.kt)("strong",{parentName:"p"}," 8 - 1",(0,i.kt)("br",{parentName:"strong"}),"uint16 ranges from 0 to 2 ")," 16 - 1",(0,i.kt)("br",{parentName:"p"}),"\n","...",(0,i.kt)("br",{parentName:"p"}),"\n","uint256 ranges from 0 to 2 ","*","*"," 256 - 1"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Add more")))}m.isMDXComponent=!0}}]);