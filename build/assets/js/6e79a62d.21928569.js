"use strict";(self.webpackChunkbuilders_eth=self.webpackChunkbuilders_eth||[]).push([[7301],{3905:function(t,e,n){n.d(e,{Zo:function(){return g},kt:function(){return c}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=r.createContext({}),u=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},g=function(t){var e=u(t.components);return r.createElement(s.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,s=t.parentName,g=o(t,["components","mdxType","originalType","parentName"]),d=u(n),c=a,m=d["".concat(s,".").concat(c)]||d[c]||p[c]||i;return n?r.createElement(m,l(l({ref:e},g),{},{components:n})):r.createElement(m,l({ref:e},g))}));function c(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o.mdxType="string"==typeof t?t:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},409:function(t,e,n){n.r(e),n.d(e,{assets:function(){return g},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return p}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],o={sidebar_position:4},s="Integers",u={unversionedId:"solidity-101/language-building-blocks/Data-Types/integer-and-unsigned-integer-sizes",id:"solidity-101/language-building-blocks/Data-Types/integer-and-unsigned-integer-sizes",title:"Integers",description:"different sizes are available",source:"@site/docs/solidity-101/2-language-building-blocks/2-Data-Types/12-integer-and-unsigned-integer-sizes.mdx",sourceDirName:"solidity-101/2-language-building-blocks/2-Data-Types",slug:"/solidity-101/language-building-blocks/Data-Types/integer-and-unsigned-integer-sizes",permalink:"/docs/solidity-101/language-building-blocks/Data-Types/integer-and-unsigned-integer-sizes",draft:!1,editUrl:"https://github.com/tesla809/BuildersETH/issues/docs/solidity-101/2-language-building-blocks/2-Data-Types/12-integer-and-unsigned-integer-sizes.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Integers",permalink:"/docs/solidity-101/language-building-blocks/Data-Types/integers"},next:{title:"Unsigned Integers",permalink:"/docs/solidity-101/language-building-blocks/Data-Types/unsigned-integers"}},g={},p=[{value:"Size, integers and unsigned integers",id:"size-integers-and-unsigned-integers",level:2}],d={toc:p};function c(t){var e=t.components,n=(0,a.Z)(t,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"integers"},"Integers"),(0,i.kt)("p",null,"different sizes are available",(0,i.kt)("br",{parentName:"p"}),"\n","uint8 ranges from 0 to 2 ",(0,i.kt)("strong",{parentName:"p"}," 8 - 1",(0,i.kt)("br",{parentName:"strong"}),"uint16 ranges from 0 to 2 ")," 16 - 1",(0,i.kt)("br",{parentName:"p"}),"\n","...",(0,i.kt)("br",{parentName:"p"}),"\n","uint256 ranges from 0 to 2 ","*","*"," 256 - 1"),(0,i.kt)("h2",{id:"size-integers-and-unsigned-integers"},"Size, integers and unsigned integers"),(0,i.kt)("p",null,"The table below shows the built-in integer types in Solidity."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Length"),(0,i.kt)("th",{parentName:"tr",align:null},"Signed"),(0,i.kt)("th",{parentName:"tr",align:null},"Unsigned"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"8-bit"),(0,i.kt)("td",{parentName:"tr",align:null},"int8"),(0,i.kt)("td",{parentName:"tr",align:null},"uint8")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"16-bit"),(0,i.kt)("td",{parentName:"tr",align:null},"int16"),(0,i.kt)("td",{parentName:"tr",align:null},"uint16")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"32-bit"),(0,i.kt)("td",{parentName:"tr",align:null},"int32"),(0,i.kt)("td",{parentName:"tr",align:null},"uint32")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"64-bit"),(0,i.kt)("td",{parentName:"tr",align:null},"int64"),(0,i.kt)("td",{parentName:"tr",align:null},"uint64")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"128-bit"),(0,i.kt)("td",{parentName:"tr",align:null},"int128"),(0,i.kt)("td",{parentName:"tr",align:null},"uint128")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"256-bit"),(0,i.kt)("td",{parentName:"tr",align:null},"int256"),(0,i.kt)("td",{parentName:"tr",align:null},"uint256")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"256-bit alias"),(0,i.kt)("td",{parentName:"tr",align:null},"int"),(0,i.kt)("td",{parentName:"tr",align:null},"uint")))),(0,i.kt)("p",null,"Like uint, different ranges are available from int8 to int256"),(0,i.kt)("p",null,"int256 ranges from -2 ",(0,i.kt)("strong",{parentName:"p"}," 255 to 2 ")," 255 - 1\nint128 ranges from -2 ",(0,i.kt)("strong",{parentName:"p"}," 127 to 2 ")," 127 - 1"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Add more")))}c.isMDXComponent=!0}}]);